// 봉우리

// 지도 정보가 N*N 격자판에 주어집니다. 각 격자에는 그 지역의 높이가 쓰여있습니다. 각 격자
// 판의 숫자 중 자신의 상하좌우 숫자보다 큰 숫자는 봉우리 지역입니다. 봉우리 지역이 몇 개
// 있는 지 알아내는 프로그램을 작성하세요.
// 격자의 가장자리는 0으로 초기화 되었다고 가정한다.
// 만약 N=5 이고, 격자판의 숫자가 다음과 같다면 봉우리의 개수는 10개입니다.

// 0 0 0 0 0 0 0
// 0 5 3 7 2 3 0
// 0 3 7 1 6 1 0
// 0 7 2 5 3 4 0
// 0 4 3 6 4 1 0
// 0 8 7 3 5 2 0
// 0 0 0 0 0 0 0

// ▣ 입력설명
// 첫 줄에 자연수 N이 주어진다.(1<=N<=50)
// 두 번째 줄부터 N줄에 걸쳐 각 줄에 N개의 자연수가 주어진다. 각 자연수는 100을 넘지 않는
// 다.

// ▣ 출력설명
// 봉우리의 개수를 출력하세요.

// ▣ 입력예제 1
// 5
// 5 3 7 2 3
// 3 7 1 6 1
// 7 2 5 3 4
// 4 3 6 4 1
// 8 7 3 5 2

// ▣ 출력예제 1
// 10

// const solution = (arr) => {
//   let answer = 0;

//   for (let i = 0; i < arr.length; i++) {
//     for (let j = 0; j < arr.length; j++) {
//       let 비교대상 = arr[i][j];

//       let 비교대상1 = 0;
//       let 비교대상2 = 0;
//       let 비교대상3 = 0;
//       let 비교대상4 = 0;

//       try {
//         비교대상1 = arr[i - 1][j] || 0; //상
//       } catch (e) {
//         비교대상1 = 0;
//       }
//       try {
//         비교대상2 = arr[i + 1][j] || 0; //하
//       } catch (e) {
//         비교대상2 = 0;
//       }
//       try {
//         비교대상3 = arr[i][j - 1] || 0; //좌
//       } catch (e) {
//         비교대상3 = 0;
//       }
//       try {
//         비교대상4 = arr[i][j + 1] || 0; //우
//       } catch (e) {
//         비교대상4 = 0;
//       }

//       if (
//         비교대상 > 비교대상1 &&
//         비교대상 > 비교대상2 &&
//         비교대상 > 비교대상3 &&
//         비교대상 > 비교대상4
//       ) {
//         answer++;
//       }
//     }
//   }

//   return answer;
// };

const solution1 = (arr) => {
  let answer = 0;
  let x = [-1, 0, 1, 0];
  let y = [0, 1, 0, -1];

  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length; j++) {
      let flag = 1;
      for (let k = 0; k < x.length; k++) {
        let dx = i - x[k];
        let dy = j - y[k];

        if (
          dx >= 0 &&
          dx < arr.length &&
          dy >= 0 &&
          dy < arr.length &&
          arr[dx][dy] > arr[i][j]
        ) {
          flag = 0;
          break;
        }
      }
      if (flag) {
        answer++;
      }
    }
  }

  return answer;
};

let arr = [
  [5, 3, 7, 2, 3],
  [3, 7, 1, 6, 1],
  [7, 2, 5, 3, 4],
  [4, 3, 6, 4, 1],
  [8, 7, 3, 5, 2],
];

console.log(solution1(arr));
